apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana
  namespace: cluster-monitoring
  labels:
    dashboards: "cluster-monitoring"
spec:
  config:
    server:
      root_url: ${GRAFANA_HOSTNAME}
    log:
      mode: "console"
    auth:
      disable_login_form: "true"
    auth.generic_oauth:
      enabled: "true"
      auto_login: "true"
      name: "Default"
      allow_sign_up: "true"
      client_id: ${OAUTH_CLIENT_ID}
      client_secret: ${OAUTH_CLIENT_SECRET}
      scopes: "openid email profile offline_access"
      email_attribute_path: email
      login_attribute_path: username
      name_attribute_path: full_name
      allow_assign_grafana_admin: "true"
      role_attribute_strict: "true"
      use_refresh_token: "true"
      auth_url: "${OAUTH_HOST}/realms/${OAUTH_REALM}/protocol/openid-connect/auth"
      token_url: "${OAUTH_HOST}/realms/${OAUTH_REALM}/protocol/openid-connect/token"
      api_url: "${OAUTH_HOST}/realms/${OAUTH_REALM}/protocol/openid-connect/userinfo"
      signout_redirect_url: "${OAUTH_HOST}/realms/${OAUTH_REALM}/protocol/openid-connect/logout?post_logout_redirect_uri=${GRAFANA_SCHEME}%3A%2F%2F${GRAFANA_HOSTNAME}%2Flogin"
      role_attribute_path: >
        contains(resource_access.grafana.roles, 'superadmin') && 'GrafanaAdmin' 
        || contains(resource_access.grafana.roles, 'admin') && 'Admin' 
        || contains(resource_access.grafana.roles, 'editor') && 'Editor' 
        || contains(resource_access.grafana.roles, 'viewer') && 'Viewer'
  deployment:
    spec:
      template:
        spec:
          containers:
            - name: grafana
              envFrom:
                - configMapRef:
                    name: grafana-oidc
              env:
                - name: OAUTH_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: grafana-oidc
                      key: OAUTH_CLIENT_ID
                - name: OAUTH_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: grafana-oidc
                      key: OAUTH_CLIENT_SECRET
  ingress:
    metadata:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
    spec:
      ingressClassName: nginx
      rules:
        - host: ${GRAFANA_HOSTNAME}
          http:
            paths:
              - backend:
                  service:
                    name: grafana-service
                    port:
                      number: 3000
                path: /
                pathType: Prefix
      tls:
        - hosts:
            - ${GRAFANA_HOSTNAME}
          secretName: ${GRAFANA_HOSTNAME}

